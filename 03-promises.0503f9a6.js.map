{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAO,CACXC,OAAQC,SAASC,cAAc,SAC/BC,WAAYF,SAASC,cAAc,kBACnCE,WAAYH,SAASC,cAAc,gBACnCG,UAAWJ,SAASC,cAAc,eAClCI,YAAaL,SAASC,cAAc,kBActC,SAASK,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,KACLH,GACFF,EAAQ,C,SAAEH,E,MAAUC,IAEtBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAC1BQ,OAAOlB,EAAKK,WAAWc,OAAO,G,CApBrCnB,EAAKC,OAAOmB,iBAAiB,SAAUZ,GACvCR,EAAKC,OAAOmB,iBAAiB,SAE7B,SAAsBC,GAEpB,GADAA,EAAMC,kBACDD,EAAME,OAAOJ,MAEhB,YADAK,EAAA1B,GAAS2B,OAAOC,QAAQ,yB,IAkB5B,IAAK,IAAIC,EAAI,EAAGA,EAAIT,OAAOU,OAAOT,OAAQQ,GAAK,EAC7CnB,EAAcmB,EAAI,EAAGT,OAAOR,MAAMS,OAASD,OAAOW,KAAKV,OAASQ,GAC7DG,MAAK,EAACrB,SAAEA,EAAQC,MAAEA,MACjBc,EAAA1B,GAAS2B,OAAOM,QAAQ,qBAAqBtB,QAAeC,MAAU,IAEvEsB,OAAM,EAACvB,SAAEA,EAAQC,MAAEA,MAClBc,EAAA1B,GAAS2B,OAAOC,QAAQ,oBAAoBjB,QAAeC,MAAU,IAEzEA,OAASQ,OAAOZ,UAAUa","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst refs = {\n  formEl: document.querySelector('.form'),\n  checkBtnEl: document.querySelector('button[submit]'),\n  inputDelay: document.querySelector('input[delay]'),\n  inputStep: document.querySelector('input[step]'),\n  inputAmount: document.querySelector('input[amount]'),\n};\n\nrefs.formEl.addEventListener('submit', createPromise);\nrefs.formEl.addEventListener('input', onEmptyField);\n\nfunction onEmptyField(event) {\n  event.preventDefault();\n  if (!event.target.value) {\n    Notiflix.Notify.failure('Please fill all fields');\n    return;\n  }\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      }\n      reject({ position, delay });\n    }, Number(refs.inputDelay.value));\n  });\n}\n\nfor (let i = 0; i < Number(amount.value); i += 1) {\n  createPromise(i + 1, Number(delay.value) + Number(step.value) * i)\n    .then(({ position, delay }) => {\n      Notiflix.Notify.success(`Fulfilled promise ${position} in ${delay}ms`);\n    })\n    .catch(({ position, delay }) => {\n      Notiflix.Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n    });\n  delay += Number(inputStep.value);\n}\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$refs","formEl","document","querySelector","checkBtnEl","inputDelay","inputStep","inputAmount","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","Number","value","addEventListener","event","preventDefault","target","$parcel$interopDefault","Notify","failure","i","amount","step","then","success","catch"],"version":3,"file":"03-promises.0503f9a6.js.map"}